services:
  # Database Services
  mysql:
    image: mysql:8.0
    container_name: devops_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - devops_network

  redis:
    image: redis:latest
    container_name: devops_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - devops_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: devops_prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=200h'
    restart: unless-stopped
    networks:
      - devops_network

  alertmanager:
    image: prom/alertmanager:latest
    container_name: devops_alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager-simple.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - devops_network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: devops_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - devops_network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: devops_cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped
    networks:
      - devops_network

  mysql-exporter:
    image: prom/mysqld-exporter:latest
    container_name: devops_mysql_exporter
    ports:
      - "9104:9104"
    environment:
      DATA_SOURCE_NAME: "exporter:password@tcp(mysql:3306)/"
    command: 
      - "--mysqld.username=exporter"
      - "--mysqld.address=mysql:3306"
    depends_on:
      - mysql
    restart: unless-stopped
    networks:
      - devops_network

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: devops_redis_exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - devops_network

  pushgateway:
    image: prom/pushgateway:latest
    container_name: devops_pushgateway
    ports:
      - "${PUSHGATEWAY_PORT}:9091"
    restart: unless-stopped
    networks:
      - devops_network

  grafana:
    image: grafana/grafana:latest
    container_name: devops_grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    restart: unless-stopped
    networks:
      - devops_network
    depends_on:
      - prometheus

  opensearch:
    image: opensearchproject/opensearch:2.5.0
    container_name: devops_opensearch
    environment:
      - discovery.type=${DISCOVERY_TYPE}
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms${OPENSEARCH_MEMORY} -Xmx${OPENSEARCH_MEMORY}"
      - "DISABLE_SECURITY_PLUGIN=true"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "${OPENSEARCH_PORT}:9200"
    volumes:
      - ./opensearch/config/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
      - opensearch_data:/usr/share/opensearch/data
    networks:
      - devops_network
    restart: unless-stopped

  superset:
    image: apache/superset:latest
    container_name: devops_superset
    depends_on:
      - mysql
      - redis
    ports:
      - "${SUPERSET_PORT}:8088"
    volumes:
      - ./superset/config/superset_config.py:/app/superset/superset_config.py
      - superset_data:/app/superset_home
    environment:
      - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY}
      - ADMIN_USERNAME=${SUPERSET_ADMIN_USER}
      - ADMIN_EMAIL=${SUPERSET_ADMIN_EMAIL}
      - ADMIN_PASSWORD=${SUPERSET_ADMIN_PASSWORD}
    networks:
      - devops_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    
  # Web Application Services
  testing-web-client:
    build:
      context: ./testing-web/client
      dockerfile: Dockerfile
    container_name: devops_vue_app
    ports:
      - "${VUE_APP_PORT}:80"
    environment:
      - NODE_ENV=production
      - VUE_APP_API_URL=${VUE_APP_API_URL}
    depends_on:
      - testing-web-server
    networks:
      - devops_network
    restart: unless-stopped

  testing-web-server:
    build:
      context: ./testing-web/server
      dockerfile: Dockerfile
    container_name: devops_express_api
    ports:
      - "${EXPRESS_PORT}:3001"
    environment:
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=${JWT_EXPIRY}
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - DB_NAME=${MYSQL_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - mysql
      - redis
    networks:
      - devops_network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:
  opensearch_data:
  superset_data:

networks:
  devops_network:
    driver: bridge
